diff --cc src/Customer/Customer.h
index 46b0eaa,fa088ed..0000000
--- a/src/Customer/Customer.h
+++ b/src/Customer/Customer.h
@@@ -1,13 -1,11 +1,15 @@@
  #ifndef CUSTOMER_H
  #define CUSTOMER_H
  #include <iostream>
 +#include <vector>
++
 +#include <QObject>
  #include "Action.h"
  #include "Enquire.h"
  #include "Browse.h"
  #include "Purchasing.h"
  #include"Greenhouse/Plant.h"
++
  using namespace std;
  
  
@@@ -16,8 -14,8 +18,9 @@@ class Customer : public QObjec
  private:
  	Action * action;
  	int id;
 -	vector<Plant> *basket;
 -
 +	vector<Plant*> basket;
++	Staff * assignedStaff;
 +	Q_OBJECT
  
  
  public:
@@@ -25,9 -23,12 +28,15 @@@
  	void setAction(std::string ss);
  	Customer();
  	virtual ~Customer();
 -	bool addToBasket(Plant*plants,int quantity); //to-do
 +	bool addToBasket(Plant*plants,int quantity);
 +	bool removeFromBasket(Plant* plants,int quantity);
 +	explicit Customer(QObject *parent = nullptr) : QObject(parent) {}
++
+ 	bool removeFromBasket(Plant* plants,int quantity); //to-do
+ 	int getId();
+ 	Action* getAction();
+ 	void setAssignedStaff(Staff*ss);
+ 	
  };
  
 -#endif
 +#endif
diff --cc src/Staff/InfoDesk.h
index 3903692,5a5b21b..0000000
--- a/src/Staff/InfoDesk.h
+++ b/src/Staff/InfoDesk.h
@@@ -3,29 -3,40 +3,43 @@@
  #include <iostream>
  #include <queue>
  #include <vector>
+ #include <algorithm>
 -#include "Customer.h"
 -#include "Staff.h"
++
 +#include "./Customer/Customer.h"
- #include "Staff.h"
++#include "../Staff/Staff.h"
  
  using namespace std;
  
--//class Staff;
++//class Customer;
  class InfoDesk {
  	private:
  	 // 
  	Staff*chainHead; //staff member with most priority
  	std::queue<Customer*> waitingCustomers; // queued customers 
  	std::vector<Staff*> AllStaff; 
- 	std::vector<Staff*> AvailableStaff;
 -	std::vector<Staff*> AvailableStaf;
++	//std::vector<Staff*> AvailableStaf;
+ 	Staff* findAvailableStaffThroughChain();
  
  public:
  	virtual void notify(Staff* staff);// notify 
  	InfoDesk();
  	virtual ~InfoDesk(); 
  	InfoDesk* getInfodesk();
- 	void handleCustomer(); // called by requestAssistance
- 	bool FindAvailableStaff(Customer cc);
- 	bool removeAvailableStaff(Staff ss);
- 	bool addAvailableStaff(Staff ss);
+ 	void EnquiryChain();
+ 	void buildChain();
+ 	void clearChain();
++
+ 	void handleCustomer(Customer* customer); // called by requestAssistance
 -	bool FindAvailableStaff(Customer *cc);
++	bool FindAvailableStaff();
+ 	bool removeStaff(Staff *ss);
+ 	bool addStaff(Staff* ss); //doing
+ 	void processWaitingCustomers();
+ 	void notifyStaffAvailable(Staff* freedStaff);
+ 	std::vector<Staff*> getStaffByType(std::string ss);
++	void AssignStaffToCustomer(Customer * c);
+ 	
+ 
+ 
  
  
  };
diff --cc src/Staff/Staff.cpp
index fb7e2cc,d26f6f8..0000000
--- a/src/Staff/Staff.cpp
+++ b/src/Staff/Staff.cpp
@@@ -17,20 -17,20 +17,29 @@@ void Staff::changeState(
  			this->state=new Busy();
  			this->state->setContext(this);
  		}
++
++		std::cout<< name<< " changed state to " <<state->getStateName()<<std::endl;
  	
  	}
  }
  
  void Staff::update(const std::string &update)
  {
--	std::cout << "New Notification: " << update << std::endl;
++	std::cout << "New Notification for " << name<<": " <<update << std::endl;
  }
  
--Staff::Staff()
++Staff::Staff(std::string &name,std::string &id)
  {
  	// TODO - implement Staff ::Staff
--	this->state = new Available();
--
++	
++name=name;
++id=id;
++available= true;
++infoDesk=nullptr;
++nextInChain=nullptr;
++currentCustomer=nullptr;
++state=new Available();
++state->setContext(this);
  }
  
  Staff::~Staff()
@@@ -43,7 -43,29 +52,142 @@@ void Staff::setAvailability(bool isAvai
  	available=isAvailable;
  }
  
- void Staff::getAvailability(){
++bool Staff::getAvailability(){
++
++	return available;
++}
++
+ Staff* Staff::getNextInChain()
+ {
 -
++return nextInChain;
+ }
+ 
+ void Staff::setNextInChain(Staff*ss)
+ {
 -
++nextInChain=ss;
+ }
+ 
+ std::string Staff::getName()
+ {
+ return name;
+ }
+ 
+ std::string Staff::getID()
+ {
+  return staffID;
+ }
+ 
+ std::string Staff::getStaffType()
+ {
  	
+ 	return state->getStateName();
+ 
+ }
++
++InfoDesk * Staff::getInfodesk()
++{
++	return this->infoDesk;
++}
++
++void Staff::completeTask()
++{
++	state->handle();
 +}
- void Staff::setAvailability(){}
++
++ void Staff::assistCustomer(Customer *cc)
++ {
++	if(!cc)
++	{
++		std::cout<<"Staff "<< name<< "cannot assist null Customer"<<std::endl;
++		return;
++	}
++	if(!getAvailability())
++	{
++	std::cout<<"Staff "<< name<< "is not Available."<<std::endl;
++		return;
++	}
++
++	std::cout<<"Staff "<<name<< " is ssisting Customer "<<cc->getId();
++	currentCustomer=cc;
++	this->changeState();
++	available=false;
++	performDuty();
++	cc->setAssignedStaff(this);
++
++ }
++
++ Staff* Staff::handleEnquiryRequest()
++ {
++if(canHandleEnquiry()&& getAvailability())
++{
++	std::cout<< getStaffType()<<" "<<name<< "can handle enquiry."<<std::endl;
++}
++return this;
++
++if(nextInChain)
++{
++
++	std::cout<< getStaffType()<<" "<<name<< "can't handle enquiry.Passing on to.."<<std::endl;
++	std::cout<<nextInChain->getStaffType();
++	return nextInChain->handleEnquiryRequest();
++}
++
++//otherwise
++std::cout<<"No staff avaialable to handle enquiry."<<std::endl;
++return nullptr;
++ }
++
++
++ void Staff::registerToAllStaff(InfoDesk *desk)
++ {
++	if(!desk)
++	{
++		std::cout<<"cannot register. Null Infodesk."<<std::endl;
++		return;
++	}
++
++	if(infoDesk)
++	{
++		std::cout<<"Staff already registered in AllStaff."<<std::endl;
++		return;
++	}
++
++	infoDesk=desk;
++	desk->addStaff(this);
++	std::cout<<name<< " registered from AllStaff."<<std::endl;
++
++ }
++
++ void Staff ::unregisterFromAllStaff()
++ {
++if(!infoDesk)
++{
++	std::cout<<"Staff not registered!"<<std::endl;
++	return;
++}
++
++this->infoDesk->removeStaff(this);
++infoDesk=nullptr;
++std::cout<<name<< " unregistered from AllStaff."<<std::endl;
++
++ }
++
++ std::string Staff::getStateName()
++ {
++ if(state)
++ {
++	return state->getStateName();
++ }
++ return "Unknown";
++}
++
++Customer* Staff::getCurrentCustomer()
++{
++	return currentCustomer;
++
++}
++
++void Staff::setCurrentCustomer(Customer* cc)
++{
++currentCustomer=cc;
++}
diff --git a/src/Customer/Customer.cpp b/src/Customer/Customer.cpp
index 883bb5c..a7110d3 100644
--- a/src/Customer/Customer.cpp
+++ b/src/Customer/Customer.cpp
@@ -73,5 +73,5 @@ Action* Customer::getAction()
 
 void Customer::setAssignedStaff(Staff*ss)
 {
-
+assignedStaff=ss;
 }
\ No newline at end of file
diff --git a/src/Staff/Busy.cpp b/src/Staff/Busy.cpp
index ce0b62c..d583dc6 100644
--- a/src/Staff/Busy.cpp
+++ b/src/Staff/Busy.cpp
@@ -5,18 +5,17 @@ void Busy::handle() {
 
 	if(staff)
 	{
+		std::cout<<staff->getName()<< " is completing this task."<<std::endl;
 
-		
+		staff->setCurrentCustomer(nullptr);
 		this->staff->changeState();
 		this->staff->setAvailability(true);
+		InfoDesk* infod = staff->getInfodesk();
+		if(infod)
+		{
+			infod->notifyStaffAvailable(staff);
+		}
 		std::cout<< "Staff has assisted customer. Staff is now Available."<<std::endl;
-		
-		this->staff->changeState();
-		this->staff->setAvailability(true);	
-		
-		
-
-		//remove staff from Infodesk::AvailableStaff
 
 	}
 	
diff --git a/src/Staff/Busy.h b/src/Staff/Busy.h
index 9c1bcf3..6873306 100644
--- a/src/Staff/Busy.h
+++ b/src/Staff/Busy.h
@@ -5,6 +5,7 @@
 #include "Staff.h"
 using namespace std;
 
+
 class Busy : public StaffState
 {
 public:
diff --git a/src/Staff/Cashiers.cpp b/src/Staff/Cashiers.cpp
index 54ea6ca..9472f43 100644
--- a/src/Staff/Cashiers.cpp
+++ b/src/Staff/Cashiers.cpp
@@ -1,39 +1,38 @@
 #include "Cashiers.h"
 
 void Cashiers::makeTransaction() {
-	// TODO - implement Cashiers::makeTransaction
-	
-}
+	std::cout<<""
 
-void Cashiers::getAvailability() {
-	// TODO - implement Cashiers::getAvailability
-	
-}
+  
 
-void Cashiers::setAvailability() {
-	// TODO - implement Cashiers::setAvailability
 	
 }
 
-Cashiers::Cashiers() {
+
+Cashiers::Cashiers(std::string& name,std::string& id):Staff(name,id) {
 	// TODO - implement Cashiers::Cashiers
 	
+	workArea="Till";
 }
 
 Cashiers::~Cashiers()
 {
+	delete this;
 }
 
 
-std::string getName()
+std::string Cashiers::getStaffType() 
 {
+return "Cashier";
+}
 
+bool Cashiers::canHandleEnquiry()
+{
+	return false;
 }
-std::string getID()
+
+void Cashiers::performDuty()
 {
 
 }
-std::string getStaffType() 
-{
 
-}
\ No newline at end of file
diff --git a/src/Staff/Cashiers.h b/src/Staff/Cashiers.h
index 7ac2633..ef3c0a1 100644
--- a/src/Staff/Cashiers.h
+++ b/src/Staff/Cashiers.h
@@ -1,19 +1,34 @@
 #ifndef CASHIERS_H
 #define CASHIERS_H
 #include <iostream>
-#include "Staff.h"
-#include "../Greenhouse/Inventory.h"
+#include <queue>
+#include "./Staff.h"
+
+//#include "../Greenhouse/Inventory.h"
 using namespace std;
 
+class Inventory;
+
 class Cashiers : public Staff
 {
+private:
+std::queue<Customer*> CustomerQueue;
+Customer *currentCustomer;
+
+
+
 public:
+
+
 	Inventory *subject;
 	void makeTransaction();
-	void getAvailability();
-	void setAvailability();
-	Cashiers();
+	Cashiers(std::string& name, std::string& id);
 	virtual ~Cashiers();
+	std::string getStaffType();
+	bool canHandleEnquiry() ;
+	void performDuty();
+	void emptyBasket();
+	
 	
 
 };
diff --git a/src/Staff/InfoDesk.cpp b/src/Staff/InfoDesk.cpp
index 192d320..d3322c3 100644
--- a/src/Staff/InfoDesk.cpp
+++ b/src/Staff/InfoDesk.cpp
@@ -1,5 +1,5 @@
 #include "InfoDesk.h"
-#include "Staff.h"
+
 
 void InfoDesk::notify(Staff *staff)
 {
@@ -51,13 +51,29 @@ void InfoDesk::handleCustomer(Customer* customer) // called by enquiring custome
 }
 }
 
-bool InfoDesk::FindAvailableStaff(Customer *cc)
+bool InfoDesk::FindAvailableStaff()
 {
     if(!chainHead)
     {
         std::cout<<"Currently no staff available. Please queue for assistance."<<std::endl;
         return false;
     }
+    //get a staff member
+    Staff *assignedStaff;
+    assignedStaff= findAvailableStaffThroughChain();
+    if(assignedStaff)
+    {
+        std::cout<<assignedStaff->getName() +" is on their way to assist customer. "<<std::endl;
+        
+  }
+
+  else
+  {
+    std::cout<<"No available staff found."<<std::endl;
+  }
+
+return assignedStaff;
+
 
 }
 
@@ -233,3 +249,84 @@ for(Staff* ss: AllStaff)
 return result;
 }
 
+Staff* InfoDesk::findAvailableStaffThroughChain()
+{
+if(!chainHead)
+{
+    return nullptr;
+}
+return chainHead->handleEnquiryRequest();
+}
+
+
+void InfoDesk::processWaitingCustomers()
+{
+    if(waitingCustomers.empty())
+    {
+        std::cout<<"No customers in queue."<<std::endl;
+        return;
+    }
+
+  int processed =0;
+  while (!waitingCustomers.empty())
+  {
+    Staff *assignedStaff;
+    assignedStaff= findAvailableStaffThroughChain();
+    if(!assignedStaff)
+    {
+        std::cout<<"No staff available. Remain in queue."<<std::endl;
+        break;
+
+  }
+  Customer*customer= waitingCustomers.pop();
+  std::cout<<"InfoDesk assigning" <<assignedStaff->getName()<<" to customer "<<customer.getID()<<std::endl;
+  assignedStaff->assistCustomer(customer);
+  customer->setAssignedStaff();
+  processed ++;
+
+  }
+
+  std::cout<<"Processed customers: "<<processed<<std::endl;
+  std::cout<<waitingCustomers.size() << "still in queue."<<std::endl;
+}
+
+void InfoDesk::notifyStaffAvailable(Staff* freedStaff)
+{
+if(!freedStaff)
+{
+    std::cout<<"Cannot recognise staff. Staff is null."<<std::endl;
+    return;
+}
+
+std::cout<< freedStaff->getName() <<"is available."<<std::endl;
+
+}
+
+void InfoDesk::AssignStaffToCustomer(Customer *cc)
+{
+if(cc==nullptr)
+{
+    std::cout<<"Customer is Null. Cannot assign staff member to customer."<<std::endl;
+    return;
+}
+
+Staff *assignedStaff;
+    assignedStaff= findAvailableStaffThroughChain();
+    if(assignedStaff)
+    {
+        std::cout<<"Assigning immediately."<<std::endl;
+        std::cout<<assignedStaff->getName()<" assigned to customer "<<cc->getId()<<std::endl;
+       assignedStaff->assistCustomer(cc);
+       cc->setAssignedStaff(assignedStaff);
+  }
+
+  else{
+    waitingCustomers.push(cc);
+    std::cout<<"No Staff available. Customer added to queue."<<std::endl;
+    std::cout<<"Current queue size: "<<waitCustomers.size()<<std::endl;
+
+  }
+
+
+
+}
\ No newline at end of file
diff --git a/src/Staff/Staff.h b/src/Staff/Staff.h
index 6ed4a7f..244d8f6 100644
--- a/src/Staff/Staff.h
+++ b/src/Staff/Staff.h
@@ -5,18 +5,23 @@
 #include "StaffState.h"
 #include "Available.h"
 #include "Busy.h"
+#include "./Customer/Customer.h"
 //#include "../Greenhouse/Inventory.h"
-#include "InfoDesk.h"
-//#include "Customer.h"
-using namespace std;
+//#include "InfoDesk.h"
 
+using namespace std;
+class InfoDesk;
 class Inventory;
+
 class Staff
 {
+	protected:
+	string workArea;
+
 private:
 	string name;
 	string staffID;
-	string workArea;
+	
 	StaffState *state;
 	InfoDesk *infoDesk;
 	bool available;  
@@ -26,16 +31,31 @@ private:
 public:
 	virtual void update(const std::string &update);
 	void changeState();
-	virtual void getAvailability();
+	bool getAvailability();
 	void setAvailability(bool isAvailable);
-	Staff();
+	
+	Staff(std::string& name,std::string& id);
 	virtual ~Staff();
-	virtual void setNextInChain(Staff* next);
-	virtual void assistCustomer(Customer *cc); //start Assisting customer
+	 void setNextInChain(Staff* next);
+	 void assistCustomer(Customer *cc); //start Assisting customer
 	std::string getName();
 	std::string getID();
-	std::string getStaffType();
+	virtual std::string getStaffType();
+	std::string getStateName();
+	Customer * getCurrentCustomer();
 	Staff* getNextInChain();
+	void setCurrentCustomer(Customer * cc);
+	InfoDesk* getInfodesk();
+	Staff* handleEnquiryRequest();
+	virtual void performDuty();
+	void completeTask();
+	virtual bool canHandleEnquiry()=0;
+	void registerToAllStaff(InfoDesk*desk);
+	void unregisterFromAllStaff();
+	
+
+
+
 
 	
 
